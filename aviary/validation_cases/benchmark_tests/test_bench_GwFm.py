"""
Notes
-----
Includes:
Takeoff, Climb, Cruise, Descent, Landing
Computed Aero
Large Single Aisle 1 data
"""

import unittest
from copy import deepcopy

import numpy as np
from openmdao.core.problem import _clear_problem_names
from openmdao.utils.testing_utils import require_pyoptsparse, use_tempdirs

from aviary.interface.methods_for_level1 import run_aviary
from aviary.models.test_aircraft.GwFm_phase_info import phase_info
from aviary.validation_cases.benchmark_utils import compare_against_expected_values


@use_tempdirs
class ProblemPhaseTestCase(unittest.TestCase):
    """
    Test the setup and run of a large single aisle commercial transport aircraft using
    GASP mass method, GASP aero method, and HEIGHT_ENERGY mission method. Expected outputs
    based on 'models/test_aircraft/aircraft_for_bench_FwFm.csv' model.
    """

    def setUp(self):
        expected_dict = {}

        # block auto-formatting of tables
        # fmt: off
        expected_dict['times'] = np.array(
            [
                [0.0], [74.60893749], [177.55404332], [210.13581734], [210.13581734],
                [368.94387021], [588.06656998], [657.41815526], [657.41815526], [863.45604608],
                [1147.74628249], [1237.72317031], [1237.72317031], [1443.76106113], [1728.05129754],
                [1818.02818536], [1818.02818536], [1976.83623822], [2195.958938], [2265.31052328],
                [2265.31052328], [2339.91946077], [2442.8645666], [2475.44634062], [2475.44634062], 
                [4831.3406017], [8081.99383717], [9110.81447198], [9110.81447198], [9170.16444824],
                [9252.05530197], [9277.97347719], [9277.97347719], [9399.1829979], [9566.42739727],
                [9619.35967786], [9619.35967786], [9763.46580543], [9962.30284901],
                [10025.23409346], [10025.23409346], [10146.44361418], [10313.68801355],
                [10366.62029413], [10366.62029413], [10425.97027039], [10507.86112413],
                [10533.77929934],
            ]
        )

        expected_dict['altitudes'] = np.array(
            [
                [624.0378457], [873.40378704], [1217.47788978], [1326.37616688], [1326.37616688],
                [1862.88183266], [2621.93406637], [2866.70935233], [2866.70935233], [3589.73605274],
                [4562.99503498], [4865.14076038], [4865.14076038], [5553.78255487], [6503.9676775],
                [6804.69802006], [6804.69802006], [7445.33290431], [8689.98430436], [9171.05216179],
                [9171.05216179], [9708.07912391], [10439.06288327], [10668.0], [10668.0], [10668.0],
                [10668.0], [10668.0], [10668.0], [9907.44790892], [8933.72252617], [8643.82497636], 
                [8643.82497636], [7421.30066454], [6104.40497665], [5776.98229927], [5776.98229927],
                [4977.87490254], [3986.24136812], [3699.20143773], [3699.20143773], [3164.23099731],
                [2444.0520473], [2220.45935194], [2220.45935194], [1798.82210359], [651.91699471],
                [152.4],
            ]
        )

        expected_dict['masses'] = np.array(
            [
                [1.00000000e00], [6.28742536e04], [6.83298491e04], [6.74130282e04], [6.74130282e04],
                [6.75471141e04], [6.75301179e04], [6.75387213e04], [6.75387213e04], [6.75334138e04],
                [6.75147939e04], [6.75020073e04], [6.75020073e04], [6.74082154e04], [6.71825238e04],
                [6.71159264e04], [6.71159264e04], [6.68713039e04], [6.53778177e04], [6.44201695e04],
                [6.44201695e04], [6.27775728e04], [5.95992397e04], [5.95870574e04], [5.95870574e04],
                [5.96974053e04], [5.97665414e04], [5.97870840e04], [5.97870840e04], [6.26060017e04],
                [6.70704562e04], [6.63007156e04], [6.63007156e04], [6.65159867e04], [6.68073139e04],
                [6.68820821e04], [6.68820821e04], [6.70560321e04], [6.72704295e04], [6.73288877e04],
                [6.73288877e04], [6.70986432e04], [6.63642958e04], [6.62419645e04], [6.62419645e04],
                [6.79967655e04], [7.08005547e04], [7.03419179e04],
            ]
        )

        expected_dict['ranges'] = np.array(
            [
                [1.00000000e00], [7.43082778e02], [3.09958257e03], [4.68002465e03], [4.68002465e03],
                [6.72070234e03], [9.43943926e03], [1.45438423e04], [1.45438423e04], [1.94683924e04],
                [2.55356392e04], [3.29482517e04], [3.29482517e04], [3.97560169e04], [4.69795016e04],
                [5.30545479e04], [5.30545479e04], [5.78080218e04], [6.43991135e04], [6.97280680e04],
                [6.97280680e04], [7.45722126e04], [8.13718989e04], [8.34803393e04], [8.34803393e04],
                [2.12703030e05], [3.90119564e05], [4.46057635e05], [4.46057635e05], [4.46841888e05],
                [4.48071911e05], [4.48435230e05], [4.48435230e05], [4.49768532e05], [4.51598140e05],
                [4.52444543e05], [4.52444543e05], [4.55867993e05], [4.62515036e05], [4.64874456e05],
                [4.64874456e05], [4.69554777e05], [4.76416261e05], [4.78720241e05], [4.78720241e05],
                [7.51409260e05], [1.43727516e06], [1.56412287e06],
            ]
        )

        expected_dict['velocities'] = np.array(
            [
                [61.16441435], [82.13771293], [99.94270051], [102.90955429], [102.90955429],
                [114.88222879], [133.40141784], [139.73248507], [139.73248507], [156.28893229],
                [170.82806313], [173.47163769], [173.47163769], [179.22557853], [189.60324408],
                [193.45934679], [193.45934679], [202.04608278], [218.65423631], [224.95156564],
                [224.95156564], [230.62997426], [234.13062692], [234.21336134], [234.21336134],
                [233.98657], [233.67364425], [233.57460431], [233.57460431], [232.07626836],
                [225.81098085], [222.79582543], [222.79582543], [209.85660526], [200.26950018],
                [199.36869167], [199.36869167], [196.4045296], [185.79597364], [180.83709395],
                [180.83709395], [170.70778466], [157.31013352], [153.21548477], [153.21548477],
                [144.12631253], [116.22409009], [103.49080449],
            ]
        )
        # fmt: on

        self.expected_dict = expected_dict

        self.phase_info = deepcopy(phase_info)

        _clear_problem_names()  # need to reset these to simulate separate runs

    @require_pyoptsparse(optimizer='IPOPT')
    def bench_test_swap_1_GwFm_IPOPT(self):
        prob = run_aviary(
            'models/test_aircraft/aircraft_for_bench_GwFm.csv',
            self.phase_info,
            max_iter=100,
            optimizer='IPOPT',
            verbosity=0,
        )

        compare_against_expected_values(prob, self.expected_dict)

    @require_pyoptsparse(optimizer='SNOPT')
    def bench_test_swap_1_GwFm_SNOPT(self):
        prob = run_aviary(
            'models/test_aircraft/aircraft_for_bench_GwFm.csv',
            self.phase_info,
            max_iter=50,
            optimizer='SNOPT',
            verbosity=0,
        )
        compare_against_expected_values(prob, self.expected_dict)


if __name__ == '__main__':
    test = ProblemPhaseTestCase()
    test.setUp()
    # test.bench_test_swap_1_GwFm_IPOPT()
    test.bench_test_swap_1_GwFm_SNOPT()
